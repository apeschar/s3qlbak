#!/bin/bash

set -eu
set -o pipefail

say() { echo "$@" >&2; }
say_do() { say "$@"; "$@"; }

if [[ $# -ne 1 ]]; then
    say "Usage: $0 <hostname>"
    exit 1
fi

hostname="$1"

s3_bucket="kibo-s3qlbak-$hostname"
s3_region="eu-west-1"
s3_lifecycle_configuration='{
    "Rules": [
        {
            "Status": "Enabled",
            "Prefix": "",
            "NoncurrentVersionExpiration": {
                "NoncurrentDays": 90
            },
            "ID": "Rule for the Entire Bucket"
        }
    ]
}'

iam_path="/"
iam_user="s3qlbak.$hostname"
iam_policy_name="BackupPolicy"
iam_policy_document='{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:PutObject",
                "s3:DeleteObject"
            ],
            "Resource": [
                "arn:aws:s3:::'"$s3_bucket"'",
                "arn:aws:s3:::'"$s3_bucket"'/*"
            ]
        }
    ]
}'

# Check that jq is installed.
if ! jq --version >/dev/null; then
    say "Please install jq and try again."
    exit 1
fi

# Create a temporary file for intermediary values.
tmp=$(mktemp)
trap "rm -f '$tmp'" EXIT

# Create IAM user.
aws iam create-user --path "$iam_path" --user-name "$iam_user" > $tmp
iam_user_id="$(jq -r '.User.UserId' < $tmp)"

# Get user credentials.
aws iam create-access-key --user-name "$iam_user" > $tmp
iam_access_key="$(jq -r '.AccessKey.AccessKeyId' < $tmp)"
iam_secret_key="$(jq -r '.AccessKey.SecretAccessKey' < $tmp)"

# Add inline policy.
aws iam put-user-policy \
    --user-name "$iam_user" --policy-name "$iam_policy_name" --policy-document "$iam_policy_document"

# Create S3 bucket.
aws s3 mb s3://"$s3_bucket" --region "$s3_region"
aws s3api put-bucket-versioning --bucket "$s3_bucket" --versioning-configuration "Status=Enabled"
aws s3api put-bucket-lifecycle --bucket "$s3_bucket" --lifecycle-configuration "$s3_lifecycle_configuration"

# Output details.
echo "mkdir -p ~/.s3ql && chmod 700 ~/.s3ql && cat > ~/.s3ql/authinfo2 <<EOF"
echo "[s3qlbak]"
echo "storage-url:      s3://$s3_bucket"
echo "backend-login:    $iam_access_key"
echo "backend-password: $iam_secret_key"
echo "EOF"
